@model VivaFund.DomainModels.Project

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    if(Model.Rewards == null)
    {
        Model.Rewards = Model.Rewards ?? new List<VivaFund.DomainModels.Reward>();
        var rew = new VivaFund.DomainModels.Reward();
        rew.ProjectID = Model.ProjectId;
        rew.Project = Model;
        rew.Title = "";
        rew.RewardDescription = "";
        Model.Rewards.Add(rew);
    }
    else
    {

    }


}
<br />
<br />
<h2 align="center">Create a Project</h2>
<br />
<br />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        <div class="stepwizard-row setup-panel" align="justify">
            <div class="stepwizard-step col-md-4">
                <a class="btn btn-circle btn-default btn-primary" href="#step-1" type="button">1</a>
                <p>Step 1</p>
            </div>
            <div class="stepwizard-step col-md-4">
                <a disabled="disabled" class="btn btn-default btn-circle " href="#step-2" type="button">2</a>
                <p>Step 2</p>
            </div>
            <div class="stepwizard-step col-md-4">
                <a disabled="disabled" class="btn btn-default btn-circle" href="#step-3" type="button">3</a>
                <p>Step 3</p>
            </div>
        </div>
        <div class="row setup-content" id="step-1">
            <div>
                <div class="col-md-10">
                    <h3> Step 1</h3>
                    <div class="form-horizontal">

                        <h4 class="text-center">Basic </h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.MemberId)
                        @Html.HiddenFor(model => model.Member)

                        <div class="form-group">
                            @Html.LabelFor(model => model.TitleEn, "Give your Project a Title", htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.TitleEn, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter Title", required = "required" } })
                                @Html.ValidationMessageFor(model => model.TitleEn, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectCategoryId, "Choose a Category", htmlAttributes: new { @class = "control-label col-md-6 text-right" })
                            <div class="col-md-6">
                                @Html.DropDownList("ProjectCategoryId", (IEnumerable<SelectListItem>)ViewBag.ProjectCategoryId, htmlAttributes: new { @class = "form-control text-center", required = "required" })
                                @Html.ValidationMessageFor(model => model.ProjectCategoryId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Goal, "Set a Goal", htmlAttributes: new { @class = "control-label col-md-6 text-right" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.Goal, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.Goal, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Url, "Select a video from Youtube", htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter Title", required = "required" } })
                                @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.BodyEn, "What's your project about?", htmlAttributes: new { @class = "control-label col-md-6 text-right" })
                            <div class="col-md-6">
                                @Html.TextAreaFor(model => model.BodyEn, new { @class = "form-control", style = "width: 100%; max-width: 100%;", required = "required" })
                                @Html.ValidationMessageFor(model => model.BodyEn, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @*@<div class="form-group">
                                @Html.LabelFor(model => model.Goal, "Completed By", htmlAttributes: new { @class = "control-label col-md-6 text-right" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.InsertedDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                                    @Html.ValidationMessageFor(model => model.InsertedDate, "", new { @class = "text-danger" })
                                </div>
                            </div>*@


                    </div>
                    @Html.Button("Back To List", new { @class = "btn btn-primary btn-lg pull-left", @type = "button", @onclick = "location.href='/Projects'" })
                    @Html.Button("Next", new { @class = "btn btn-primary nextBtn btn-lg pull-right", @type = "button" })
                </div>
            </div>
        </div>
        <div class="row setup-content" id="step-2">
            <div>
                <div class="col-md-10">
                    <h3> Step 2</h3>
                    <div class="form-horizontal">

                        <h4 class="text-center">Rewards </h4>
                            @Html.EditorFor(model => model.Rewards)
                            <p>
                                <input type="submit" value="Add" name="action:Add" />
                            </p>
                    </div>

                    @Html.Button("Back To List", new { @class = "btn btn-primary btn-lg pull-left", @type = "button", @onclick = "location.href='/Projects'" })

                    @Html.Button("Next", new { @class = "btn btn-primary nextBtn btn-lg pull-right", @type = "button" })

                </div>
            </div>
        </div>
        <div class="row setup-content" id="step-3">
            <div class="col-xs-6 col-md-offset-3">
                <div class="col-md-12">
                    <h3> Step 3 - Submit Your Project</h3>
                    <div class="form-group ">
                        <div class="text-center">
                            <input type="submit" value="Create"  name="action:Create" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />
    <br />
}
@section Scripts {
   
<script>
    $(document).ready(function () {
        var navListItems = $('div.setup-panel div a'),
                allWells = $('.setup-content'),
                allNextBtn = $('.nextBtn');

        allWells.hide();

        navListItems.click(function (e) {
            e.preventDefault();
            var $target = $($(this).attr('href')),
                    $item = $(this);

            if (!$item.hasClass('disabled')) {
                navListItems.removeClass('btn-primary').addClass('btn-default');
                $item.addClass('btn-primary');
                allWells.hide();
                $target.show();
                $target.find('input:eq(0)').focus();
            }
        });

        allNextBtn.click(function () {
            var curStep = $(this).closest(".setup-content"),
                curStepBtn = curStep.attr("id"),
                nextStepWizard = $('div.setup-panel div a[href="#' + curStepBtn + '"]').parent().next().children("a"),
                curInputs = curStep.find("input[type='text'],input[type='url']"),
                isValid = true;

            $(".form-group").removeClass("has-error");
            for (var i = 0; i < curInputs.length; i++) {
                if (!curInputs[i].validity.valid) {
                    isValid = false;
                    $(curInputs[i]).closest(".form-group").addClass("has-error");
                }
            }

            if (isValid)
                nextStepWizard.removeAttr('disabled').trigger('click');
        });

        $('div.setup-panel div a.btn-primary').trigger('click');
    });
    </script>
}

